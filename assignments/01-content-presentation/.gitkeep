import prisma from "@/repos/prisma";



task.js:


export async function get(projectId) {
  return await prisma.task.findMany({
    where: {
      project: projectId,
    },
  });
}

export async function add(data) {
  return await prisma.task.create({
    data,
  });
}

export async function update(id, data) {
  return await prisma.task.update({
    where: { id },
    data,
  });
}

export async function remove(id) {
  return await prisma.task.delete({
    where: { id },
  });
}

export async function patch(id, data) {
  return await prisma.task.update({
    where: { id },
    data,
  });
}




import prisma from "@/repos/prisma";

export async function get(id) {
  if (!id) {
    return await prisma.project.findMany({
      include: {
        tasks: true,
      },
    });
  }
  return await prisma.project.findUnique({
    where: {
      id,
    },
    include: {
      tasks: true,
    },
  });
}

export async function add(data) {
  return await prisma.project.create({
    data,
  });
}

export async function update(id, data) {
  return await prisma.project.update({
    where: { id },
    data,
  });
}

export async function remove(id) {
  return await prisma.project.delete({
    where: { id },
  });
}





















// Task component
export default function Task({ task, callback }) {
  // Function to handle toggling task completion status
  async function handleToggle(event) {
    // Prevent default form submission behavior
    event.preventDefault();
    // Toggle the completed status of the task
    const response = await fetch(`/api/${task.project}/${task.id}`, {
      method: "PATCH",
      body: JSON.stringify({
        completed: !task.completed,
      }),
    });

    // If the request is successful, refresh the task data
    if (response.ok) {
      callback();
    }
  }

  // Render task title and action buttons
  return (
    <div className="flex justify-between">
      {/* Display task title */}
      <h2>{task.title}</h2>
      <div>
        {/* Button to toggle task completion status */}
        <button title="Toggle" onClick={handleToggle}>
          {/* Render different icon based on task completion status */}
          {task.completed ? <SquareCheckBig /> : <Square />}
        </button>
        {/* Button to delete task */}
        <button title="Delete">
          <SquareX /> {/* Icon for delete action */}
        </button>
      </div>
    </div>
  );
}
